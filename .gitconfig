[alias]
	# Random shorthands
	br = branch
	ls = ls-files
	pick = cherry-pick

	# Checkouts
	co = switch
	col = checkout
	cor = switch
	checkoutlocal = checkout
	checkoutremote = switch

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Commit with message
	cm = commit -m

	# Back to a clean state
	undo = "!f() { git reset HEAD \"$1\" && git checkout -- \"$1\" }; f"

	# Unshallow a repository
	unshallow = "!f() { git remote set-branches origin '*' && git fetch -v --depth=1; }; f"

	# Diffs
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	dis = diff --staged

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# Pulls and pushes
	pro = pull --rebase origin main
	prom = pull --rebase origin master
	pushbr = push -u origin HEAD
	rbi = rebase --interactive

	# Statuses
	# View the current working tree status using the short format
	s = status -s
	# View the current working tree status using the short format plus branch comparison information
	sb = status -sb
	# View the current working tree status
	st = status

	# Submodules
	# Pull in remote changes for the current repository and all its submodules
	up = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	c = clone --recursive

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	fix = commit --amend
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with the default branch, ignoring the current branch
	# a.k.a. "delete merged"
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	dm-dry = "!git branch --merged | grep -v '\\*'"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

[color]
	ui = true
[color "diff"]
	meta = 11
	frag = magenta bold
	func = 146 bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[commit]
	template = ~/.gitmessage
[core]
	editor = vim
	excludesfile = ~/.gitignore.global
	pager = diff-so-fancy | less --tabs=4 -RFX
[diff]
	colorMoved = zebra
[fetch]
	prune = true
[include]
	path = .gitconfig.local
[init]
	defaultBranch = main
[interactive]
	diffFilter = diff-so-fancy --patch
[pager]
	branch = false
	tag = false
[pull]
	rebase = true
[push]
	default = simple
	autoSetupRemote = true
